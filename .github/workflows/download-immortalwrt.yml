name: Dynamic ImmortalWRT Builder (Optimized)
 
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'ImmortalWRT版本号 (如24.10.0)'
        required: true 
        default: '24.10.0'
        type: string 
      model_id:
        description: '设备型号'
        required: true 
        default: 'qihoo_360t7'
        type: choice 
        options:
          - qihoo_360t7 
          - redmi_ax6-stock 
      packages:
        description: '要包含的软件包 (空格分隔)，用-pkg排除'
        required: false 
        default: 'luci-app-firewall luci-app-upnp dnsmasq-full'
 
env:
  CCACHE_DIR: /tmp/ccache_dir 
  BUILD_PARALLEL: $(($(nproc) + 1))
 
jobs:
  build-firmware:
    runs-on: ubuntu-22.04 
    timeout-minutes: 90 
    
    steps:
      - name: 初始化环境 
        uses: actions/checkout@v3.6.0 
        
      - name: 安装编译依赖 
        run: |
          sudo apt-get update -y 
          sudo apt-get install -y --no-install-recommends \
            ccache jq zstd build-essential libncurses-dev \
            zlib1g-dev gawk git gettext libssl-dev xsltproc \
            wget unzip python3 libelf-dev ca-certificates 
 
      - name: 设置ccache缓存 
        uses: actions/cache@v3 
        with:
          path: /tmp/ccache_dir 
          key: ${{ runner.os  }}-ccache-${{ inputs.version  }}-${{ inputs.model_id  }}
 
      - name: 获取目标平台信息 
        id: target-info 
        run: |
          JSON_URL="https://immortalwrt.kyarucloud.moe/releases/${{  inputs.version  }}/.overview.json" 
          echo "正在获取平台信息: $JSON_URL"
          
          if ! curl -fsSL "$JSON_URL" -o overview.json;  then 
            echo "::error::无法获取版本${{ inputs.version  }}的配置文件"
            exit 1 
          fi 
          
          TARGET=$(jq -r --arg model "${{ inputs.model_id  }}" '
            .profiles[] | select(.id == $model) | .target' overview.json) 
          
          [ -z "$TARGET" ] && {
            echo "::error::设备${{ inputs.model_id  }}在版本${{ inputs.version  }}中不存在"
            exit 1 
          }
          
          echo "target_platform=$TARGET" >> $GITHUB_OUTPUT 
          echo "target_formatted=${TARGET//\//-}" >> $GITHUB_OUTPUT 
          echo "target_arch=$(cut -d'/' -f1 <<<"$TARGET")" >> $GITHUB_OUTPUT 
 
      - name: 下载ImageBuilder 
        run: |
          URL="https://immortalwrt.kyarucloud.moe/releases/${{  inputs.version  }}/targets/${{ steps.target-info.outputs.target_platform  }}/immortalwrt-imagebuilder-${{ inputs.version  }}-${{ steps.target-info.outputs.target_formatted  }}.Linux-x86_64.tar.zst" 
          echo "正在下载: $URL"
          
          if ! wget --progress=dot:giga "$URL" -O imagebuilder.tar.zst;  then 
            echo "::error::ImageBuilder下载失败"
            exit 1 
          fi 
          
          echo "下载完成，开始校验文件..."
          if ! tar -tf imagebuilder.tar.zst  >/dev/null; then 
            echo "::error::下载文件损坏"
            exit 1 
          fi 
 
      - name: 解压ImageBuilder 
        run: |
          mkdir -p imagebuilder 
          tar -I zstd -xf imagebuilder.tar.zst  -C imagebuilder --strip-components=1 
          rm imagebuilder.tar.zst  
          echo "文件结构:"
          ls -lh imagebuilder/
 
      - name: 配置软件源 
        run: |
          cd imagebuilder 
          
          # 获取架构信息 
          ARCH_PACKAGES=$(grep 'CONFIG_TARGET_ARCH_PACKAGES=' .config | cut -d'"' -f2)
          echo "目标架构包: $ARCH_PACKAGES"
          
          # 生成安全的源配置 
          cat > repositories.conf  <<EOF 
            src/gz immortalwrt_base https://downloads.immortalwrt.org/releases/${{  inputs.version  }}/packages/$ARCH_PACKAGES/base 
            src/gz immortalwrt_luci https://downloads.immortalwrt.org/releases/${{  inputs.version  }}/packages/$ARCH_PACKAGES/luci 
            src/gz immortalwrt_packages https://downloads.immortalwrt.org/releases/${{  inputs.version  }}/packages/$ARCH_PACKAGES/packages 
            src/gz immortalwrt_routing https://downloads.immortalwrt.org/releases/${{  inputs.version  }}/packages/$ARCH_PACKAGES/routing 
          EOF 
          
          # 特殊设备处理 
          case "${{ inputs.model_id  }}" in 
            qihoo_360t7)
              echo "src/gz custom_kenzok8 https://op.dllkids.xyz/packages/$ARCH_PACKAGES/"  >> repositories.conf  
              ;;
            redmi_ax6-stock)
              echo "src/gz custom_coolsnowwolf https://github.com/coolsnowwolf/packages/trunk/$ARCH_PACKAGES"  >> repositories.conf  
              ;;
          esac 
          
          echo "最终软件源配置:"
          cat repositories.conf  
 
      - name: 分阶段编译 
        run: |
          cd imagebuilder 
          export PATH="/usr/lib/ccache:$PATH"
          export CCACHE_DIR="/tmp/ccache_dir"
          export BUILD_JOBS=$(($(nproc) + 1))  # 关键修复：先计算再使用 
          
          # 第一阶段：基础系统 
          echo "::group::第一阶段编译（基础系统）"
          make image \
            PROFILE="qihoo_360t7" \
            PACKAGES="base-files luci-mod-admin-full luci-proto-ppp" \
            DISABLED_SERVICES="firewall dnsmasq" \
            -j$BUILD_JOBS V=s || exit 1 
          echo "::endgroup::"
          
          # 第二阶段：核心组件 
          echo "::group::第二阶段编译（核心组件）"
          make image \
            PROFILE="qihoo_360t7" \
            PACKAGES="kmod-mt7915e kmod-mt76-core wireless-regdb hostapd-common" \
            -j$BUILD_JOBS V=s || exit 1 
          echo "::endgroup::" 
          
          # 第三阶段：用户定制包 
          echo "::group::最终编译（用户包）"
          CLEAN_PACKAGES=$(echo "luci-app-firewall luci-app-upnp dnsmasq-full" | sed -E 's/-luci-i18n-\w+//g')
          make image \
            PROFILE="qihoo_360t7" \
            PACKAGES="$CLEAN_PACKAGES" \
            FILES=files/ \
            -j$BUILD_JOBS V=s 2>&1 | tee build.log  || {
            echo "::error::编译失败"
            grep -iE "error:|failed" build.log  | head -n 20 
            exit 1 
          }
          echo "::endgroup::"
          
          echo "编译产物:"
          ls -lh bin/targets/mediatek/filogic/

      - name: 上传固件 
        uses: actions/upload-artifact@v4 
        with:
          name: immortalwrt-${{ inputs.model_id  }}-${{ inputs.version  }}-${{ github.run_number  }}
          path: |
            imagebuilder/bin/targets/${{ steps.target-info.outputs.target_platform  }}/packages 
            imagebuilder/bin/targets/${{ steps.target-info.outputs.target_platform  }}/openwrt-*
          retention-days: 7 
 
      - name: 空间清理 
        if: always()
        run: |
          du -sh imagebuilder/
          rm -rf imagebuilder/ /tmp/*