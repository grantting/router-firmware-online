name: Dynamic Download and Build ImmortalWRT 
 
on:
  workflow_dispatch:
    inputs:
      version:
        description: '输入目标版本号（例如24.10.0）'
        required: true 
        default: '24.10.0'
      model_id:
        description: '输入机型ID（例如asus_rt-ac3100）'
        required: true 
        default: 'asus_rt-ac3100'
      packages:
        description: '选择要编译的包（用空格分隔），可用 -pkg 排除包'
        required: false 
        default: 'luci-app-advancedplus luci-app-fan luci-app-filemanager luci-app-firewall luci-app-log luci-app-package-manager luci-app-syscontrol luci-app-upnp luci-app-wizard opkg'
 
jobs:
  download-build:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout 
        uses: actions/checkout@v3 
 
      - name: Install dependencies 
        run: |
          sudo apt-get update 
          sudo apt-get install -y jq zstd build-essential libncurses5-dev libncursesw5-dev \
                                 zlib1g-dev gawk git gettext libssl-dev xsltproc wget unzip python3 
 
      - name: Get Target Platform 
        id: get-target 
        run: |
          JSON_URL="https://immortalwrt.kyarucloud.moe/releases/${{  inputs.version  }}/.overview.json"   
          curl -s $JSON_URL -o overview.json    
          
          TARGET=$(jq -r --arg model "${{ inputs.model_id  }}" '
            .profiles[] | select(.id == $model) | .target 
          ' overview.json)   
          
          if [ -z "$TARGET" ]; then 
            echo "错误：未找到机型 ${{ inputs.model_id  }}"
            exit 1 
          fi 
 
          echo "target_platform_slash=$TARGET" >> $GITHUB_OUTPUT 
          FORMATTED_TARGET=$(echo $TARGET | tr '/' '-')
          echo "target_platform_hyphen=$FORMATTED_TARGET" >> $GITHUB_OUTPUT 
 
      - name: Download ImageBuilder 
        run: |
          URL="https://immortalwrt.kyarucloud.moe/releases/${{  inputs.version  }}/targets/${{ steps.get-target.outputs.target_platform_slash  }}/immortalwrt-imagebuilder-${{ inputs.version  }}-${{ steps.get-target.outputs.target_platform_hyphen  }}.Linux-x86_64.tar.zst"   
          wget $URL -O imagebuilder.tar.zst  
 
      - name: Extract ImageBuilder 
        run: |
          tar -I zstd -xf imagebuilder.tar.zst  
          rm imagebuilder.tar.zst  
          echo "解压完成，目录结构："
          ls -l immortalwrt-imagebuilder-*/
 
      - name: Modify repositories.conf  
        run: |
          cd immortalwrt-imagebuilder-*
          
          # 获取架构信息 
          ARCH_PACKAGES=$(grep 'CONFIG_TARGET_ARCH_PACKAGES=' .config | cut -d '"' -f 2)
          echo "检测到架构包: $ARCH_PACKAGES"
                    
          # 修改源配置 
          sed -i 's/^option check_signature/# option check_signature/' repositories.conf  
          echo "src/gz openwrt_kenzok8_package https://op.dllkids.xyz/packages/$ARCH_PACKAGES/"  >> repositories.conf  
          
          echo "repositories.conf  修改后内容:"
          cat repositories.conf  
          
          cd ..
 
      - name: Build Firmware 
        run: |
          cd immortalwrt-imagebuilder-*
          
          # 准备编译命令 
          BUILD_CMD="make image \
            PROFILE=\"${{ inputs.model_id  }}\" \
            PACKAGES=\"${{ inputs.packages  }}\" \
            FILES=files/ \
            DISABLED_SERVICES=\"\""
          
          echo "执行编译命令: $BUILD_CMD"
          
          # 执行编译 
          eval $BUILD_CMD 
          
          # 显示生成的文件 
          echo "编译完成，生成的文件:"
          ls -lh bin/targets/${{ steps.get-target.outputs.target_platform_slash  }}/
 
      - name: Upload Artifacts 
        uses: actions/upload-artifact@v3 
        with:
          name: firmware-${{ inputs.model_id  }}-${{ inputs.version  }}
          path: immortalwrt-imagebuilder-*/bin/targets/${{ steps.get-target.outputs.target_platform_slash  }}/ 